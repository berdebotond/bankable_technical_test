// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: protos/protobuf.proto

package bankable_technical_test

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InvoiceService_CreateInvoice_FullMethodName = "/invoice.InvoiceService/CreateInvoice"
	InvoiceService_GetInvoice_FullMethodName    = "/invoice.InvoiceService/GetInvoice"
	InvoiceService_GetIssuer_FullMethodName     = "/invoice.InvoiceService/GetIssuer"
	InvoiceService_GetInvestors_FullMethodName  = "/invoice.InvoiceService/GetInvestors"
	InvoiceService_PlaceBid_FullMethodName      = "/invoice.InvoiceService/PlaceBid"
	InvoiceService_ApproveTrade_FullMethodName  = "/invoice.InvoiceService/ApproveTrade"
)

// InvoiceServiceClient is the client API for InvoiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoiceServiceClient interface {
	CreateInvoice(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Invoice, error)
	GetInvoice(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Invoice, error)
	GetIssuer(ctx context.Context, in *Issuer, opts ...grpc.CallOption) (*Issuer, error)
	GetInvestors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (InvoiceService_GetInvestorsClient, error)
	PlaceBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Bid, error)
	ApproveTrade(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Bid, error)
}

type invoiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceServiceClient(cc grpc.ClientConnInterface) InvoiceServiceClient {
	return &invoiceServiceClient{cc}
}

func (c *invoiceServiceClient) CreateInvoice(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Invoice, error) {
	out := new(Invoice)
	err := c.cc.Invoke(ctx, InvoiceService_CreateInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetInvoice(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Invoice, error) {
	out := new(Invoice)
	err := c.cc.Invoke(ctx, InvoiceService_GetInvoice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetIssuer(ctx context.Context, in *Issuer, opts ...grpc.CallOption) (*Issuer, error) {
	out := new(Issuer)
	err := c.cc.Invoke(ctx, InvoiceService_GetIssuer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetInvestors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (InvoiceService_GetInvestorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &InvoiceService_ServiceDesc.Streams[0], InvoiceService_GetInvestors_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &invoiceServiceGetInvestorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InvoiceService_GetInvestorsClient interface {
	Recv() (*Investor, error)
	grpc.ClientStream
}

type invoiceServiceGetInvestorsClient struct {
	grpc.ClientStream
}

func (x *invoiceServiceGetInvestorsClient) Recv() (*Investor, error) {
	m := new(Investor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *invoiceServiceClient) PlaceBid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Bid, error) {
	out := new(Bid)
	err := c.cc.Invoke(ctx, InvoiceService_PlaceBid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) ApproveTrade(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Bid, error) {
	out := new(Bid)
	err := c.cc.Invoke(ctx, InvoiceService_ApproveTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceServiceServer is the server API for InvoiceService service.
// All implementations must embed UnimplementedInvoiceServiceServer
// for forward compatibility
type InvoiceServiceServer interface {
	CreateInvoice(context.Context, *Invoice) (*Invoice, error)
	GetInvoice(context.Context, *Invoice) (*Invoice, error)
	GetIssuer(context.Context, *Issuer) (*Issuer, error)
	GetInvestors(*empty.Empty, InvoiceService_GetInvestorsServer) error
	PlaceBid(context.Context, *Bid) (*Bid, error)
	ApproveTrade(context.Context, *Bid) (*Bid, error)
	mustEmbedUnimplementedInvoiceServiceServer()
}

// UnimplementedInvoiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvoiceServiceServer struct {
}

func (UnimplementedInvoiceServiceServer) CreateInvoice(context.Context, *Invoice) (*Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) GetInvoice(context.Context, *Invoice) (*Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) GetIssuer(context.Context, *Issuer) (*Issuer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssuer not implemented")
}
func (UnimplementedInvoiceServiceServer) GetInvestors(*empty.Empty, InvoiceService_GetInvestorsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInvestors not implemented")
}
func (UnimplementedInvoiceServiceServer) PlaceBid(context.Context, *Bid) (*Bid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceBid not implemented")
}
func (UnimplementedInvoiceServiceServer) ApproveTrade(context.Context, *Bid) (*Bid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveTrade not implemented")
}
func (UnimplementedInvoiceServiceServer) mustEmbedUnimplementedInvoiceServiceServer() {}

// UnsafeInvoiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoiceServiceServer will
// result in compilation errors.
type UnsafeInvoiceServiceServer interface {
	mustEmbedUnimplementedInvoiceServiceServer()
}

func RegisterInvoiceServiceServer(s grpc.ServiceRegistrar, srv InvoiceServiceServer) {
	s.RegisterService(&InvoiceService_ServiceDesc, srv)
}

func _InvoiceService_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_CreateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).CreateInvoice(ctx, req.(*Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetInvoice(ctx, req.(*Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issuer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_GetIssuer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetIssuer(ctx, req.(*Issuer))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetInvestors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InvoiceServiceServer).GetInvestors(m, &invoiceServiceGetInvestorsServer{stream})
}

type InvoiceService_GetInvestorsServer interface {
	Send(*Investor) error
	grpc.ServerStream
}

type invoiceServiceGetInvestorsServer struct {
	grpc.ServerStream
}

func (x *invoiceServiceGetInvestorsServer) Send(m *Investor) error {
	return x.ServerStream.SendMsg(m)
}

func _InvoiceService_PlaceBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).PlaceBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_PlaceBid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).PlaceBid(ctx, req.(*Bid))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_ApproveTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).ApproveTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_ApproveTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).ApproveTrade(ctx, req.(*Bid))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoiceService_ServiceDesc is the grpc.ServiceDesc for InvoiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "invoice.InvoiceService",
	HandlerType: (*InvoiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvoice",
			Handler:    _InvoiceService_CreateInvoice_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _InvoiceService_GetInvoice_Handler,
		},
		{
			MethodName: "GetIssuer",
			Handler:    _InvoiceService_GetIssuer_Handler,
		},
		{
			MethodName: "PlaceBid",
			Handler:    _InvoiceService_PlaceBid_Handler,
		},
		{
			MethodName: "ApproveTrade",
			Handler:    _InvoiceService_ApproveTrade_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInvestors",
			Handler:       _InvoiceService_GetInvestors_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/protobuf.proto",
}
